<launch>
	<arg name="site_location" value="charlotte_2" />
	<arg name="file_num" value="10873_1394" />
	<!--<param name="/use_sim_time" value="false" /> -->
	<param name="robot_description" command="$(find xacro)/xacro '$(find excuse_me_pkg)/urdf/excuse_me.urdf'" />

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
	
	<!-- changed the urdf because a lidar positioned changed -->
	<!-- data location for new urdf data, /vtti/projects05/460966/Data/ssblacksburgdev2/S3YNNWAJC01846R/2021-05-19_17_18_56 -->
	<!--<node pkg="rosbag" type="play" name="player" output="screen" args="-r 0.1 /home/gbeale/Bags/ExcuseMeData/NewURDF/slowSpeed2.bag -l /tf:=/tf_null /tf_static:=/tf_static_null"/> -->
	<node pkg="rosbag" type="play" name="player" required="true" output="screen" args="-r 0.1 -s 0 /vtti/projects05/460966/Working/Snipped_Merges/data_roi_$(arg file_num).bag /tf:=/tf_null /tf_static:=/tf_static_null"/>

	<arg name="rvizconfig" value="$(find excuse_me_pkg)/launch/excuseMeTracking.rviz"/>
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

	<node name="lidar_top_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">
		<param name="input_point_topic" value="/lidar_top/velodyne_points"/>
		<param name="output_point_topic" value="/lidar_top/velodyne_points_transformed"/>
		<param name="target_frame" value="base_link_ground"/>
	</node>

	<node ns="mobileye" name="mobileye_viz" pkg="mobileye_visualizer" type="mobileyeVisualizer.py" output="screen">
		<remap from="Obstacles" to="/mobileye/Obstacles"/>
		<remap from="RoadGeometry" to="/mobileye/RoadGeometry"/>
		<remap from="NextLane" to="/mobileye/NextLane"/>
		<remap from="TSRs" to="/mobileye/TSRs"/>
		<param name="frame_id" value="mobileye"/>
		<param name="target_frame_id" value="base_link"/>
		<param name="hz" value="40"/>
	</node>
	
	<!-- gps localization node -->
	<node pkg="gpsins_localizer" type="gpsins_localizer_node" name="gpsins_localizer" output="screen">
        <rosparam command="load" file="$(find gpsins_localizer)/config/params.yaml" />
	</node>
	
	<node pkg="hd_map_stf" type="hd_map_stf" name="hd_map_stf" output="screen">
		<param name="site_location" value="$(arg site_location)" />
		<param name="map_frame" value="map" />
	</node>
	
	
	<!-- ray ground filter for top lidar -->
	<include ns="top" file="$(find points_preprocessor)/launch/ray_ground_filter.launch">
		<arg name="input_point_topic" value="/lidar_top/velodyne_points_transformed" />    								<!--  -->
		<arg name="base_frame" value="base_link_ground" />             			<!-- Coordinate system to perform transform (default base_link) -->
		<arg name="clipping_height" value="5.0" />              						<!-- Remove Points above this height value (default 2.0 meters) -->
		<arg name="min_point_distance" value="2.5" />           						<!-- Removes Points closer than this distance from the sensor origin (default 1.85 meters) -->
		<arg name="radial_divider_angle" value="0.04" />        						<!-- Angle of each Radial division on the XY Plane (default 0.08 degrees)-->
		<arg name="concentric_divider_distance" value="0.4" />  						<!-- Distance of each concentric division on the XY Plane (default 0.0 meters) -->
		<arg name="local_max_slope" value="20" />  													<!-- Max Slope of the ground between Points (default 8 degrees) -->
		<arg name="general_max_slope" value="10" />  												<!-- Max Slope of the ground in the entire PointCloud, used when reclassification occurs (default 5 degrees)-->
		<arg name="min_height_threshold" value="0.05" />  									<!-- Minimum height threshold between points (default 0.05 meters)-->
		<arg name="reclass_distance_threshold" value="0.2" />  							<!-- Distance between points at which re classification will occur (default 0.2 meters)-->
		<arg name="no_ground_point_topic" value="/points_no_ground_top" />
		<arg name="ground_point_topic" value="/points_ground_top" />
	</include>
	
	
	<!-- lidar_euclidean_cluster_detect -->
	<include file="$(find lidar_euclidean_cluster_detect)/launch/lidar_euclidean_cluster_detect.launch" >
		<arg name="points_node" value="/points_no_ground_top" />
		<arg name="remove_ground" value="false" />
		<arg name="downsample_cloud" value="true" /> 	
		<arg name="leaf_size" value="0.15" />		
		<arg name="cluster_size_min" value="15" />	
		<arg name="cluster_size_max" value="8000" />	
		<arg name="sync" value="false" />
		<arg name="use_diffnormals" value="true" />	
		<arg name="pose_estimation" value="true" />
		<arg name="clip_min_height" value="-5" />	
		<arg name="clip_max_height" value="4" />
		<arg name="keep_lanes" value="true" />	
		<arg name="keep_lane_left_distance" value="60" />
		<arg name="keep_lane_right_distance" value="60" />
		<arg name="cluster_merge_threshold" value="0.75" />
		<arg name="clustering_distance" value="0.7" /> 
		<arg name="use_vector_map" value="true" />
		<arg name="wayarea_gridmap_layer" value="wayarea" />
		<arg name="output_frame" value="/base_link_ground" />	
		<arg name="remove_points_upto" value="3.0" />
		<arg name="use_gpu" value="false" />
		<arg name="use_multiple_thres" value="false"/>	
		<arg name="clustering_ranges" value="[15,30,45,60]"/>	
		<arg name="clustering_distances" value="[0.5,1.1,1.6,2.1,2.6]"/>	
	</include>
	
	<arg name="namespace" default="detection"/>
  <arg name="packagename" default="shape_estimation"/>
  <arg name="input" default="/$(arg namespace)/lidar_detector/objects_filtered"/> <!-- if using output from clusters: <"/$(arg namespace)/lidar_detector/objects", "/detection/lidar_detector/objects_filtered"> ,output from ukf: "/$(arg namespace)/object_tracker/objects" -->
  <arg name="output" default="/$(arg namespace)/$(arg packagename)/objects"/>

  <node pkg="lidar_shape_estimation" type="lidar_shape_estimation" name="lidar_shape_estimation" output="screen">
    <remap from="input"         to="$(arg input)" />
    <remap from="objects"       to="$(arg output)" />
  </node>
	
	<node pkg="imm_ukf_pda_track" type="imm_ukf_pda" name="imm_ukf_pda_01" output="screen">
		<!-- input topic, if from clusterer: "/detection/lidar_detector/objects", if from l shape: "/detection/shape_estimation/objects" -->
		<!-- if from filtered clusterer: "/detection/lidar_detector/objects_filtered" -->
		<remap from="detection/fusion_tools/objects" to="/detection/lidar_detector/objects_filtered" /> 
		<remap from="detection/objects" to="/detection/object_tracker/objects" />
		<param name="tracking_frame" value="/map" />
		
		<param name="gating_threshold" value="5" />
		<param name="gate_probability" value="0.8" />
		<param name="detection_probability" value="0.9" />
		<param name="life_time_threshold" value="5" />
		<param name="static_velocity_threshold" value="0.1" />
		<param name="static_num_history_threshold" value="0" />
		<param name="prevent_explosion_threshold" value="50000" />
		<param name="merge_distance_threshold" value="0.5" />
		
		<param name="use_vectormap" value="true" />
		<param name="vectormap_frame" value="/map" />
		<param name="lane_direction_chi_threshold" value="2.71" />
		<param name="nearest_lane_distance_threshold" value="3.0" />
		
		<param name="use_sukf" value="true" />		
	</node>

	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="ukf_track_visualization_01"
		output="screen" ns="/detection/object_tracker"/>

  <node pkg="topic_tools" type="relay" name="ukf_track_relay_01"
        output="screen" args="/detection/object_tracker/objects /detection/objects"/>
	
	<!--launch vector map loader-->
	<node pkg="map_file" type="vector_map_loader" name="vector_map_loader" output="screen">
		<param name="load_mode" value="directory" />
		<param name="map_dir" value="/vtti/projects05/460966/Working/Maps/VectorMapFolders/$(arg site_location)/" />  <!-- change director when creating docker code -->
	</node>
	
	<!-- launch way area node -->
	<include file="$(find object_map)/launch/wayarea2grid.launch" >
		<arg name="sensor_frame" default="base_link" />   <!--change name as we implement transform -->
		<arg name="grid_frame" default="map" />    <!-- centered on vehicle: base_link_ground, centered on map origin: map -->
		<arg name="grid_resolution" default="0.4" />
		<arg name="grid_length_x" default="500" />
		<arg name="grid_length_y" default="500" />
		<arg name="grid_position_x" default="0" />
		<arg name="grid_position_y" default="0" />
		<arg name="grid_position_z" default="0" />
	</include>
	
	
	<!-- launch roi object filter -->
	<!--<node pkg="roi_object_filter" type="roi_object_filter" name="roi_object_filter" output="screen" ns="/detection/object_tracker" />-->
	
	<!--<node pkg="roi_object_filter" type="roi_object_filter" name="roi_object_filter_shape_estimation" output="screen" ns="/detection/shape_estimation" />-->
	
	<!-- filtered objects visualizer -->
	<!-- IMPORTANT****** this second parameter won't work with default installations of Autoware becuase I changed the visualize detected objects code in autoware -->
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="filtered_objects_viz" output="screen" ns="/detection/object_tracker">
		<param name="objects_src_topic" value="/objects" />
		<param name="markers_out_topic" value="/objects_markers" />
	</node>
	
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="filtered_objects_shape_estimation_viz" output="screen" ns="/detection/shape_estimation">
		<param name="objects_src_topic" value="/objects" />
		<param name="markers_out_topic" value="/objects_shaped_markers" />
	</node>
	
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="extra_objects_viz" output="screen" ns="/detection" >
		<param name="objects_src_topic" value="/extras" />
		<param name="markers_out_topic" value="/extras_markers" />
	</node>
	
	<!-- launch csv generator to record subject vehicle and tracked object data -->
	<node pkg="excuse_me_pkg" type="dumpTextSample" name="trackRecorder" output="screen">
		<param name="save_path" value="/home/gbeale/autoware.ai/src/processingCode/excuse_me_pkg/OldTrackingResults/" />
		<param name="fixed_frame" value="map_veh" />
		<param name="earth_frame" value="earth" />
		<param name="objects_topic" value="/detection/object_tracker/objects" /> 
	</node> <!-- for objects from tracker: /detection/object_tracker/objects_filtered, objects from L shape: /detection/shape_estimation/objects_filtered -->
	
	<!--
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="euclidean_track_viz" output="screen" ns="/detection/object_tracker">
		<param name="objects_src_topic" value="/objects" />
	</node> -->
	
  
	<!-- Lanelet2 map loader -->
	<!--
	<arg name="file_name" value="/home/gbeale/Downloads/RS.osm"/>
	<node pkg="map_file" type="lanelet2_map_loader" name="lanelet2_map_loader" output="screen">
		<param name="lanelet2_path" value="$(arg file_name)" />
	</node>
	<node pkg="map_file" type="lanelet2_map_visualization" name="lanelet2_map_visualization" output="screen" /> -->
	
</launch>
