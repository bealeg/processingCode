<!--Write launch file using: -->
<!--/vtti/projects05/460966/Working/Snipped_Merges/data_roi_4916_12452.bag-->

<launch>                     
	<!-- launch file that connects to excuse me demo data and performs filtering, clustering, tracking, and result recording to a .csv -->                     
	<!--param name="/use_sim_time" value="true" /> -->
                     
	<param name="robot_description" command="$(find xacro)/xacro '$(find excuse_me_pkg)/urdf/excuse_me.urdf'" /> 
                     

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />                     
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

	<node pkg="rosbag" type="play" name="player" output="screen" required="true" args="-r 0.1 /vtti/projects05/460966/Working/Snipped_Merges/data_roi_4916_12452.bag /tf:=/tf_null /tf_static:=/tf_static_null"/>

	<node name="lidar_front_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">                     
		<param name="input_point_topic" value="/lidar_front/velodyne_points" />                     
		<param name="output_point_topic" value="/lidar_front/velodyne_points_transformed" />                     
		<param name="target_frame" value="base_link_ground" />                     
		</node>                     

	<node name="lidar_top_transformer" pkg = "points_preprocessor" type="cloud_transformer" output = "screen" >                     
		<param name="input_point_topic" value="/lidar_top/velodyne_points"/>                     
		<param name="output_point_topic" value="/lidar_top/velodyne_points_transformed"/>                     
		<param name="target_frame" value="base_link_ground"/>                     
	</node>                     

	<node name="lidar_rear_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">                     
		<param name="input_point_topic" value="/lidar_rear/velodyne_points" />                     
		<param name="output_point_topic" value="/lidar_rear/velodyne_points_transformed" />                     
		<param name="target_frame" value="base_link_ground" />                     
	</node>                     

	<node pkg="gpsins_localizer" type="gpsins_localizer_node" name="gpsins_localizer" output="screen" >                     
		<rosparam command="load" file="$(find gpsins_localizer)/config/params.yaml" />                     
	</node>                     

	<!-- ray ground filter for top lidar -->                     
	<include ns="top" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >                     
		<arg name="input_point_topic" value="/lidar_top/velodyne_points_transformed" />                     
		<arg name="base_frame" value="base_link_ground" />                     
		<arg name="clipping_height" value="5.0" />                     
		<arg name="min_point_distance" value="2.5" />                     
		<arg name="radial_divider_angle" value="0.04" />                     
		<arg name="concentric_divider_distance" value="0.4" />                     
		<arg name="local_max_slope" value="20" />                     
		<arg name="general_max_slope" value="10" />                     
		<arg name="min_height_threshold" value="0.05" />                     
		<arg name="reclass_distance_threshold" value="0.2" />                     
		<arg name="no_ground_point_topic" value="/points_no_ground_top" />                     
		<arg name="ground_point_topic" value="/points_ground_top" />                     
	</include>                     

	<!-- ray ground filter for front lidar -->                     
	<include ns="front" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >                     
		<arg name="input_point_topic" value="/lidar_front/velodyne_points_transformed" />                     
		<arg name="base_frame" value="base_link_ground" />                     
		<arg name="clipping_height" value="5.0" />                     
		<arg name="min_point_distance" value="1.0" />                     
		<arg name="radial_divider_angle" value="0.08" />                     
		<arg name="concentric_divider_distance" value="0.0" />                     
		<arg name="local_max_slope" value="20" />                     
		<arg name="general_max_slope" value="3" />                     
		<arg name="min_height_threshold" value="0.05" />                     
		<arg name="reclass_distance_threshold" value="0.2" />                     
		<arg name="no_ground_point_topic" value="/points_no_ground_front" />                     
		<arg name="ground_point_topic" value="/points_ground_front" />                     
	</include>                     

	<!-- ray ground filter for rear lidar -->                     
	<include ns="rear" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >                     
		<arg name="input_point_topic" value="/lidar_rear/velodyne_points_transformed" />                     
		<arg name="base_frame" value="base_link_ground" />                     
		<arg name="clipping_height" value="5.0" />                     
		<arg name="min_point_distance" value="1.0" />                     
		<arg name="radial_divider_angle" value="0.08" />                     
		<arg name="concentric_divider_distance" value="0.0" />                     
		<arg name="local_max_slope" value="20" />                     
		<arg name="general_max_slope" value="3" />                     
		<arg name="min_height_threshold" value="0.05" />                     
		<arg name="reclass_distance_threshold" value="0.2" />                     
		<arg name="no_ground_point_topic" value="/points_no_ground_rear" />                     
		<arg name="ground_point_topic" value="/points_ground_rear" />                     
	</include>                     

	<!-- point cloud concatenation for top and front lidar -->                     
	<include file="$(find points_preprocessor)/launch/points_concat_filter.launch">                     
		<arg name="input_topics" default="[/points_no_ground_front, /points_no_ground_top, /points_no_ground_rear]" />                     
		<arg name="output_topic" default="/points_no_ground" />                     
		<arg name="output_frame_id" default="base_link_ground" />                    
		<node pkg="points_preprocessor" type="points_concat_filter" name="points_concat_filter" output="screen">                     
			<param name="output_frame_id" value="$(arg output_frame_id)" />                     
			<param name="input_topics" value="$(arg input_topics)" />                     
			<remap from="/points_concat" to="$(arg output_topic)" />                     
		</node>                     
	</include>                     

	<!-- lidar_euclidean_cluster_detect -->                     
	<include file="$(find lidar_euclidean_cluster_detect)/launch/lidar_euclidean_cluster_detect.launch">                     
		<arg name="points_node" value="/points_no_ground" />                     
		<arg name="remove_ground" value="false" />                     
		<arg name="downsample_cloud" value="true" />                     
		<arg name="leaf_size" value="0.15" />                     
		<arg name="cluster_size_min" value="15" />                     
		<arg name="cluster_size_max" value="15000" />                     
		<arg name="sync" value="false" />                     
		<arg name="use_diffnormals" value="true" />                     
		<arg name="pose_estimation" value="true" />                     
		<arg name="clip_min_height" value="-10" />                     
		<arg name="clip_max_height" value="10" />                     
		<arg name="keep_lanes" value="true" />                     
		<arg name="keep_lane_left_distance" value="60" />                     
		<arg name="keep_lane_right_distance" value="60" />                     
		<arg name="cluster_merge_threshold" value="1.0" />                     
		<arg name="clustering_distance" value="0.5" />                     
		<arg name="use_vector_map" value="false" />                     
		<arg name="wayarea_gridmap_layer" value="wayarea" />                     
		<arg name="output_frame" value="/base_link_ground" />                     
		<arg name="remove_points_upto" value="3.0" />                     
		<arg name="use_gpu" value="false" />                     
		<arg name="use_multiple_thres" value="false"/>                     
		<arg name="clustering_ranges" value="[15,30,45,60]"/>                     
		<arg name="clustering_distances" value="[0.5,1.1,1.6,2.1,2.6]"/>                     
	</include>                     

	<!-- Tracking node -->                     
	rosrun lidar_tracker lidar_euclidean_track                     
	<node pkg="lidar_euclidean_track" type="lidar_euclidean_track" name="lidar_euclidean_track" output="screen">                     
		<param name="threshold_dist" value="3.0" />                     
		<param name="color_val" value="2" />  <!-- 1 for blue, anything else green-->                     
	</node>                     
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="euclidean_track_viz" output="screen" ns="/detection/object_tracker"/>                     

	<node pkg="excuse_me_pkg" type="dumpTextSample" name="trackRecorder" output="screen">
		<param name="save_path" value="/home/gbeale/autoware.ai/src/processingCode/excuse_me_pkg/OldTrackingResults/data_roi_4916_12452" />
	</node>                     
</launch>