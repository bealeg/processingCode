<?xml version="1.0"?>
<!--Write launch file: -->
<!--Using run destination: docker_cluster-->
<!--Using tracker type: ukf-->
<!--***** NO MAP *****-->
<!--/vtti/projects05/460966/Working/Snipped_Merges/data_roi_17268_11000.bag-->

<launch>         

	<!-- launch file that connects to excuse me demo data and performs filtering, clustering, tracking, and result recording to a .csv -->         
	<!--param name="/use_sim_time" value="true" /> -->
         
	<param name="robot_description" command="$(find xacro)/xacro '$(find excuse_me_pkg)/urdf/excuse_me.urdf'" />         

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />         
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

	<node pkg="rosbag" type="play" name="player" output="screen" required="true" args="-r 0.2 /vtti/projects05/460966/Working/Snipped_Merges/data_roi_17268_11000.bag /tf:=/tf_null /tf_static:=/tf_static_null"/>
		<arg name="rvizconfig" value="$(find excuse_me_pkg)/launch/excuseMeTracking.rviz"/>
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />

	<!-- Front lidar transformer to base_link_ground -->          
	<node name="lidar_front_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">         
		<param name="input_point_topic" value="/lidar_front/velodyne_points" />         
		<param name="output_point_topic" value="/lidar_front/velodyne_points_transformed" />         
		<param name="target_frame" value="base_link_ground" />         
	</node>         

	<!-- Top lidar transformer to base_link_ground -->         
	<node name="lidar_top_transformer" pkg = "points_preprocessor" type="cloud_transformer" output = "screen" >         
		<param name="input_point_topic" value="/lidar_top/velodyne_points"/>         
		<param name="output_point_topic" value="/lidar_top/velodyne_points_transformed"/>         
		<param name="target_frame" value="base_link_ground"/>         
	</node>

	<!-- Rear lidar transformer to base_link_ground -->         
	<node name="lidar_rear_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">         
		<param name="input_point_topic" value="/lidar_rear/velodyne_points" />         
		<param name="output_point_topic" value="/lidar_rear/velodyne_points_transformed" />         
		<param name="target_frame" value="base_link_ground" />         
	</node>

	<!-- GPS localizer to create map_veh frame -->         
	<node pkg="gpsins_localizer" type="gpsins_localizer_node" name="gpsins_localizer" output="screen" >         
		<rosparam command="load" file="$(find gpsins_localizer)/config/params.yaml" />         
	</node>         

	<!-- clip low points from front lidar that ground removal has trouble with -->         
	<node pkg="points_preprocessor" type="space_filter" name="front_space_filter" output="log">         
		<param name="subscribe_topic" value="/lidar_front/velodyne_points_transformed" />         
		<param name="vertical_removal" value="true" />         
		<param name="below_distance" value="1.0" />         
		<param name="above_distance" value="5.0" />         
		<param name="lateral_removal" value="false" />         
		<param name="left_distance" value="15" />         
		<param name="right_distance" value="15" />         
		<remap from="/points_clipped" to="/lidar_front/velodyne_points_transformed/clipped" />         
	</node>

	<!-- clip low points from rear lidar that ground removal has trouble with -->         
	<node pkg="points_preprocessor" type="space_filter" name="rear_space_filter" output="log">         
		<param name="subscribe_topic" value="/lidar_rear/velodyne_points_transformed" />         
		<param name="vertical_removal" value="true" />         
		<param name="below_distance" value="0.75" />         
		<param name="above_distance" value="5.0" />         
		<param name="lateral_removal" value="false" />         
		<param name="left_distance" value="15" />         
		<param name="right_distance" value="15" />         
		<remap from="/points_clipped" to="/lidar_rear/velodyne_points_transformed/clipped" />         
	</node>

	<!-- ray ground filter for top lidar -->         
	<include ns="top" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >         
		<arg name="input_point_topic" value="/lidar_top/velodyne_points_transformed" />         
		<arg name="base_frame" value="base_link_ground" />         
		<arg name="clipping_height" value="5.0" />         
		<arg name="min_point_distance" value="2.5" />         
		<arg name="radial_divider_angle" value="0.04" />         
		<arg name="concentric_divider_distance" value="0.4" />         
		<arg name="local_max_slope" value="20" />         
		<arg name="general_max_slope" value="10" />         
		<arg name="min_height_threshold" value="0.05" />         
		<arg name="reclass_distance_threshold" value="0.2" />         
		<arg name="no_ground_point_topic" value="/points_no_ground_top" />         
		<arg name="ground_point_topic" value="/points_ground_top" />         
	</include>         

	<!-- ray ground filter for front lidar -->         
	<include ns="front" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >         
		<arg name="input_point_topic" value="/lidar_front/velodyne_points_transformed/clipped" />         
		<arg name="base_frame" value="base_link_ground" />         
		<arg name="clipping_height" value="5.0" />         
		<arg name="min_point_distance" value="1.0" />         
		<arg name="radial_divider_angle" value="0.08" />         
		<arg name="concentric_divider_distance" value="0.0" />         
		<arg name="local_max_slope" value="20" />         
		<arg name="general_max_slope" value="3" />         
		<arg name="min_height_threshold" value="0.05" />         
		<arg name="reclass_distance_threshold" value="0.2" />         
		<arg name="no_ground_point_topic" value="/points_no_ground_front" />         
		<arg name="ground_point_topic" value="/points_ground_front" />         
	</include>

	<!-- ray ground filter for rear lidar -->         
	<include ns="rear" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >         
		<arg name="input_point_topic" value="/lidar_rear/velodyne_points_transformed/clipped" />         
		<arg name="base_frame" value="base_link_ground" />         
		<arg name="clipping_height" value="5.0" />         
		<arg name="min_point_distance" value="1.0" />         
		<arg name="radial_divider_angle" value="0.08" />         
		<arg name="concentric_divider_distance" value="0.0" />         
		<arg name="local_max_slope" value="20" />         
		<arg name="general_max_slope" value="10" />         
		<arg name="min_height_threshold" value="0.05" />         
		<arg name="reclass_distance_threshold" value="0.2" />         
		<arg name="no_ground_point_topic" value="/points_no_ground_rear" />         
		<arg name="ground_point_topic" value="/points_ground_rear" />         
	</include>         

	<!-- point cloud concatenation for top and front lidar -->         
	<include file="$(find points_preprocessor)/launch/points_concat_filter.launch">         
		<arg name="input_topics" default="[/points_no_ground_front, /points_no_ground_top, /points_no_ground_rear]" />         
		<arg name="output_topic" default="/points_no_ground" />         
		<arg name="output_frame_id" default="base_link_ground" />        
		<node pkg="points_preprocessor" type="points_concat_filter" name="points_concat_filter" output="screen">         
			<param name="output_frame_id" value="$(arg output_frame_id)" />         
			<param name="input_topics" value="$(arg input_topics)" />         
			<remap from="/points_concat" to="$(arg output_topic)" />         
		</node>         
	</include>

	<!-- lidar_euclidean_cluster_detect -->         
	<include file="$(find lidar_euclidean_cluster_detect)/launch/lidar_euclidean_cluster_detect.launch">         
		<arg name="points_node" value="/points_no_ground" />         
		<arg name="remove_ground" value="false" />         
		<arg name="downsample_cloud" value="true" />         
		<arg name="leaf_size" value="0.25" />         
		<arg name="cluster_size_min" value="15" />         
		<arg name="cluster_size_max" value="10000" />         
		<arg name="sync" value="false" />         
		<arg name="use_diffnormals" value="false" />         
		<arg name="pose_estimation" value="true" />         
		<arg name="clip_min_height" value="-5" />         
		<arg name="clip_max_height" value="4" />         
		<arg name="keep_lanes" value="true" />         
		<arg name="keep_lane_left_distance" value="60" />         
		<arg name="keep_lane_right_distance" value="60" />         
		<arg name="cluster_merge_threshold" value="0.75" />         
		<arg name="clustering_distance" value="0.7" />         
		<arg name="use_vector_map" value="false" />         
		<arg name="wayarea_gridmap_layer" value="wayarea" />         
		<arg name="output_frame" value="/base_link_ground" />         
		<arg name="remove_points_upto" value="3.0" />         
		<arg name="use_gpu" value="false" />         
		<arg name="use_multiple_thres" value="false"/>         
		<arg name="clustering_ranges" value="[15,30,45,60]"/>         
		<arg name="clustering_distances" value="[0.5,1.1,1.6,2.1,2.6]"/>         
	</include>         

	<!-- lidar l shape detection node -->         
	<!-- if using output from clusters: "/$(arg namespace)/lidar_detector/objects", output from ukf: "/$(arg namespace)/object_tracker/objects" -->         
	<!-- if from filtered clusterer: "/detection/lidar_detector/objects" -->         
	<arg name="namespace" default="detection"/>         
	<arg name="packagename" default="shape_estimation"/>         
	<arg name="input" default="/$(arg namespace)/lidar_detector/objects"/>         
	<arg name="output" default="/$(arg namespace)/$(arg packagename)/objects"/>         
	<node pkg="lidar_shape_estimation" type="lidar_shape_estimation" name="lidar_shape_estimation" output="screen">         
		<remap from="input" to="$(arg input)" />         
		<remap from="objects" to="$(arg output)" />         
	</node>

	<!-- imm ukf tracking node -->             
	<!-- input topic, if from clusterer: "/detection/lidar_detector/objects", if from l shape: "/detection/shape_estimation/objects" -->             
	<!-- if from filtered clusterer: "/detection/lidar_detector/objects_filtered" -->             
	<node pkg="imm_ukf_pda_track" type="imm_ukf_pda" name="imm_ukf_pda_01" output="screen">             
		<remap from="detection/fusion_tools/objects" to="/detection/lidar_detector/objects" />             
		<remap from="detection/objects" to="/detection/object_tracker/objects" />             
		<param name="tracking_frame" value="/map_veh" />             
		<param name="long_term_prevent_explosion_threshold" value="0.00005" />             
		<param name="det_s_prevent_explosion_threshold" value="5.0" />             
		<param name="det_s_consec_timesteps_thresh" value="3" />             
		<param name="long_term_prevent_explosion_threshold_age_requirement" value="20" />             
		<param name="gating_threshold" value="10" />             
		<param name="gate_probability" value="0.8" />             
		<param name="detection_probability" value="0.9" />             
		<param name="life_time_threshold" value="5" />             
		<param name="static_velocity_threshold" value="0.1" />             
		<param name="static_num_history_threshold" value="3" />             
		<param name="prevent_explosion_threshold" value="125000" />             
		<param name="merge_distance_threshold" value="0.75" />             
		<param name="use_vectormap" value="false" />             
		<param name="vectormap_frame" value="/map" />             
		<param name="lane_direction_chi_threshold" value="2.71" />             
		<param name="nearest_lane_distance_threshold" value="3.0" />
		<param name="use_sukf" value="true" />
		<param name="print_debug" value="false" />             
	</node>
	
	<node pkg="visualize_subject_vehicle_velo" type="visualize_subject_vehicle_velo" name="visualize_subject_vehicle_velo" output="screen" />
	
	
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="euclidean_track_viz" output="screen" ns="/detection/object_tracker">
		<param name="objects_src_topic" value="/objects" />
	</node>
	
</launch>
