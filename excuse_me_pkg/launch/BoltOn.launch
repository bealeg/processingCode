<?xml version="1.0"?>
<launch>
	
	<!-- launch file for bolt on tracking -->
	<param name="/use_sim_time" value="false" />
	<!-- <node pkg="rosbag" type="play" name="player" required="true" output="screen" args="-r 0.2 -s 0 /vtti/projects05/460966/Working/Snipped_Merges/data_roi_$(arg file_num).bag /tf:=/tf_null /tf_static:=/tf_static_null"/> -->
	<node pkg="rosbag" type="play" name="player" output="screen" args="-r 0.25 -s 1360
	-u 60 /vtti/projects06/451746/Data/ssb2/S6BBNJ0R704816V/2022-12-13_12_55_07/TBON_1171_5677_52_221110_1051_00016.bag"/>
	
	<arg name="rvizconfig" value="/home/gbeale/BoltOn.rviz"/>
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true" />
	
	<!-- try not to transform anything at first -->
	<!-- Front lidar transformer to base_link_ground -->          
	<!--<node name="lidar_front_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">         
		<param name="input_point_topic" value="/lidar_front/velodyne_points" />         
		<param name="output_point_topic" value="/lidar_front/velodyne_points_transformed" />         
		<param name="target_frame" value="base_link_ground" />         
	</node>  -->       
	
	<!-- Front left lidar transformer to base_link_ground -->
	<node name="lidar_front_left_transformer" pkg = "points_preprocessor" type="cloud_transformer" output = "screen" >         
		<param name="input_point_topic" value="/lidar_front_left/velodyne_points"/>         
		<param name="output_point_topic" value="/lidar_front_left/velodyne_points_transformed"/>         
		<param name="target_frame" value="base_link_ground"/>         
	</node>
	
	<!-- Front left lidar transformer to base_link_ground -->
	<node name="lidar_front_right_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">         
		<param name="input_point_topic" value="/lidar_front_right/velodyne_points" />         
		<param name="output_point_topic" value="/lidar_front_right/velodyne_points_transformed" />         
		<param name="target_frame" value="base_link_ground" />         
	</node>
	
	<!-- Rear lidar transformer to base_link_ground -->
	<node name="lidar_rear_transformer" pkg="points_preprocessor" type="cloud_transformer" output="screen">         
		<param name="input_point_topic" value="/lidar_rear/velodyne_points" />         
		<param name="output_point_topic" value="/lidar_rear/velodyne_points_transformed" />         
		<param name="target_frame" value="base_link_ground" />         
	</node>
	
	<!-- GPS localizer to create map_veh frame -->  
	<!-- <node pkg="gpsins_localizer" type="gpsins_localizer_node" name="gpsins_localizer" output="screen" >         
		<rosparam command="load" file="$(find gpsins_localizer)/config/params.yaml" />         
	</node> -->
	
	<!-- no map information -->
	<!-- HD map transformer for vector map -->
	<!--
	<node pkg="hd_map_stf" type="hd_map_stf" name="hd_map_stf" output="screen">         
		<param name="site_location" value="$(arg site_location)" />         
		<param name="map_frame" value="map" />         
	</node> -->
	
	<!-- don't clip points yet -->
	<!-- clip low points from front lidar that ground removal has trouble with -->
	<!--      
	<node pkg="points_preprocessor" type="space_filter" name="front_space_filter" output="log">         
		<param name="subscribe_topic" value="/lidar_front/velodyne_points_transformed" />         
		<param name="vertical_removal" value="true" />         
		<param name="below_distance" value="0.75" />         
		<param name="above_distance" value="5.0" />         
		<param name="lateral_removal" value="false" />         
		<param name="left_distance" value="15" />         
		<param name="right_distance" value="15" />         
		<remap from="/points_clipped" to="/lidar_front/velodyne_points_transformed/clipped" />         
	</node> -->
	
	<!-- clip low points from rear lidar that ground removal has trouble with -->
	<!--
	<node pkg="points_preprocessor" type="space_filter" name="rear_space_filter" output="log">         
		<param name="subscribe_topic" value="/lidar_rear/velodyne_points_transformed" />         
		<param name="vertical_removal" value="true" />         
		<param name="below_distance" value="0.75" />         
		<param name="above_distance" value="5.0" />         
		<param name="lateral_removal" value="false" />         
		<param name="left_distance" value="15" />         
		<param name="right_distance" value="15" />         
		<remap from="/points_clipped" to="/lidar_rear/velodyne_points_transformed/clipped" />         
	</node> -->
	
	<!-- ray ground filter for front left lidar -->         
	<include ns="front_left" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >         
		<arg name="input_point_topic" value="/lidar_front_left/velodyne_points_transformed" />         
		<arg name="base_frame" value="base_link_ground" />         
		<arg name="clipping_height" value="2.5" />         
		<arg name="min_point_distance" value="2.0" />         
		<arg name="radial_divider_angle" value="0.08" />         
		<arg name="concentric_divider_distance" value="0" />         
		<arg name="local_max_slope" value="20" />         
		<arg name="general_max_slope" value="10" />         
		<arg name="min_height_threshold" value="0.05" />         
		<arg name="reclass_distance_threshold" value="0.2" />         
		<arg name="no_ground_point_topic" value="/points_no_ground_front_left" />         
		<arg name="ground_point_topic" value="/points_ground_front_left" />         
	</include> 
	
	<!-- ray ground filter for front right lidar -->
	<include ns="front_right" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >         
		<arg name="input_point_topic" value="/lidar_front_right/velodyne_points_transformed" />         
		<arg name="base_frame" value="base_link_ground" />         
		<arg name="clipping_height" value="5.0" />         
		<arg name="min_point_distance" value="2.0" />         
		<arg name="radial_divider_angle" value="0.08" />         
		<arg name="concentric_divider_distance" value="0.0" />         
		<arg name="local_max_slope" value="20" />         
		<arg name="general_max_slope" value="10" />         
		<arg name="min_height_threshold" value="0.05" />         
		<arg name="reclass_distance_threshold" value="0.2" />         
		<arg name="no_ground_point_topic" value="/points_no_ground_front_right" />         
		<arg name="ground_point_topic" value="/points_ground_front_right" />         
	</include>

	<!-- ray ground filter for rear lidar -->
	<include ns="rear" file="$(find points_preprocessor)/launch/ray_ground_filter.launch" >         
		<arg name="input_point_topic" value="/lidar_rear/velodyne_points_transformed" />         
		<arg name="base_frame" value="base_link_ground" />         
		<arg name="clipping_height" value="5.0" />         
		<arg name="min_point_distance" value="2.0" />         
		<arg name="radial_divider_angle" value="0.08" />         
		<arg name="concentric_divider_distance" value="0.0" />         
		<arg name="local_max_slope" value="20" />         
		<arg name="general_max_slope" value="10" />         
		<arg name="min_height_threshold" value="0.05" />         
		<arg name="reclass_distance_threshold" value="0.2" />         
		<arg name="no_ground_point_topic" value="/points_no_ground_rear" />         
		<arg name="ground_point_topic" value="/points_ground_rear" />         
	</include> 

	<!-- point cloud concatenation for top, front, and rear lidar -->
	<include file="$(find points_preprocessor)/launch/points_concat_filter.launch">         
		<arg name="input_topics" default="[/points_no_ground_front_left, /points_no_ground_front_right, /points_no_ground_rear]" />         
		<arg name="output_topic" default="/points_no_ground" />         
		<arg name="output_frame_id" default="base_link_ground" />        
		<node pkg="points_preprocessor" type="points_concat_filter" name="points_concat_filter" output="screen">         
			<param name="output_frame_id" value="$(arg output_frame_id)" />         
			<param name="input_topics" value="$(arg input_topics)" />         
			<remap from="/points_concat" to="$(arg output_topic)" />         
		</node>
	</include>
	
	<!-- lidar_euclidean_cluster_detect -->
	<include file="$(find lidar_euclidean_cluster_detect)/launch/lidar_euclidean_cluster_detect.launch">         
		<arg name="points_node" value="/points_no_ground" />         
		<arg name="remove_ground" value="false" />         
		<arg name="downsample_cloud" value="true" />         
		<arg name="leaf_size" value="0.3" />         
		<arg name="cluster_size_min" value="20" />         
		<arg name="cluster_size_max" value="5000" />         
		<arg name="sync" value="false" />         
		<arg name="use_diffnormals" value="false" />         
		<arg name="pose_estimation" value="true" />         
		<arg name="clip_min_height" value="-1.0" />         
		<arg name="clip_max_height" value="2.5" />         
		<arg name="keep_lanes" value="true" />         
		<arg name="keep_lane_left_distance" value="8" />         
		<arg name="keep_lane_right_distance" value="8" />         
		<arg name="cluster_merge_threshold" value="0.75" />         
		<arg name="clustering_distance" value="1.0" />         
		<arg name="use_vector_map" value="false" />         
		<arg name="wayarea_gridmap_layer" value="wayarea" />         
		<arg name="output_frame" value="/base_link_ground" />         
		<arg name="remove_points_upto" value="2.5" />         
		<arg name="use_gpu" value="false" />         
		<arg name="use_multiple_thres" value="false"/>         
		<arg name="clustering_ranges" value="[15,30,45,60]"/>         
		<arg name="clustering_distances" value="[0.5,1.1,1.6,2.1,2.6]"/>         
	</include>
	
	
	<!-- shape estimation for euclid detections-->
	<!-- from clusters: /detection/lidar_detector/objects -->
	
	<arg name="namespace" default="detection"/>
	<arg name="packagename" default="shape_estimation"/>
	<arg name="input" default="/detection/lidar_detector/objects"/>
	<arg name="output" default="/$(arg namespace)/$(arg packagename)/objects"/>
	<node pkg="lidar_shape_estimation" type="lidar_shape_estimation" name="lidar_shape_estimation" output="screen">
		<remap from="input"         to="$(arg input)" />
		<remap from="objects"       to="$(arg output)" />
	</node>
	
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="shape_estimation_viz" output="screen">
		<param name="objects_src_topic" value="/$(arg namespace)/$(arg packagename)/objects" />
		<param name="markers_out_topic" value="/objects_shape_est_markers" />
	</node>
	
	<!-- input topic, if from clusterer: "/detection/lidar_detector/objects", if from l shape: "/detection/shape_estimation/objects" -->
	<!-- if from filtered clusterer: "/detection/lidar_detector/objects_filtered" -->
	<node pkg="imm_ukf_pda_track" type="imm_ukf_pda" name="imm_ukf_pda_01" output="screen">

		<remap from="detection/fusion_tools/objects" to="/detection/lidar_detector/objects" /> 
		<remap from="detection/objects" to="/detection/object_tracker/objects" />
		<param name="tracking_frame" value="/base_link_ground" />
		
		<param name="long_term_prevent_explosion_threshold" value="0.00005" />
		<param name="det_s_prevent_explosion_threshold" value="5.0" />
		<param name="det_s_consec_timesteps_thresh" value="3" />
		<param name="long_term_prevent_explosion_threshold_age_requirement" value="20" />
		<param name="remove_long_objects" value="false" />
		<param name="rm_long_objs_ratio" value="15" />
		
		<param name="gating_threshold" value="10" />
		<param name="gate_probability" value="0.8" />
		<param name="detection_probability" value="0.9" />
		<param name="life_time_threshold" value="5" />
		<param name="static_velocity_threshold" value="0.1" />
		<param name="static_num_history_threshold" value="3" />
		<param name="prevent_explosion_threshold" value="125000" />
		<param name="merge_distance_threshold" value="0.75" />
		
		<param name="use_vectormap" value="false" />
		<param name="vectormap_frame" value="/map" />
		<param name="lane_direction_chi_threshold" value="1.0" />
		<param name="nearest_lane_distance_threshold" value="1.0" />
		
		<param name="use_sukf" value="true" />
		<param name="print_debug" value="false" />
	</node>
	
	<!-- shape estimation for tracked objects-->
	<!-- from tracker: /detection/object_tracker/objects -->
	<!--
	<arg name="namespace" default="detection"/>
	<arg name="packagename" default="shape_estimation"/>
	<arg name="input" default="/detection/lidar_detector/objects"/>
	<arg name="output" default="/$(arg namespace)/$(arg packagename)/objects"/>
	<node pkg="lidar_shape_estimation" type="lidar_shape_estimation" name="lidar_shape_estimation" output="screen">
		<remap from="input"         to="$(arg input)" />
		<remap from="objects"       to="$(arg output)" />
	</node>
	
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="shape_estimation_viz" output="screen">
		<param name="objects_src_topic" value="/detection/object_tracker/objects" />
		<param name="markers_out_topic" value="/tracked_objects_shape_est_markers" />
	</node> -->
	
	
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="ukf_track_visualization_01"
		output="screen" ns="/detection/object_tracker"/> 

	<node pkg="topic_tools" type="relay" name="ukf_track_relay_01"
		output="screen" args="/detection/object_tracker/objects /detection/objects"/>
	
	<!-- don't need vector map loader now -->
	<!--launch vector map loader-->
	<!--
	<node pkg="map_file" type="vector_map_loader" name="vector_map_loader" output="screen">
		<param name="load_mode" value="directory" />
		<param name="map_dir" value="/vtti/projects05/460966/Working/Maps/VectorMapFolders/$(arg site_location)/" />
	</node> -->
	
	<!-- filtered objects visualizer -->
	<!-- IMPORTANT****** this second parameter won't work with default installations of Autoware becuase I changed the visualize detected objects code in autoware -->
	<!--
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="filtered_objects_viz" output="screen" ns="/detection/object_tracker">
		<param name="objects_src_topic" value="/objects_filtered" />
		<param name="markers_out_topic" value="/objects_filtered_markers" />
	</node> -->
	
	<!-- gps stuff not implemented yet -->
	<!--
	<node pkg="visualize_subject_vehicle_velo" type="visualize_subject_vehicle_velo" name="visualize_subject_vehicle_velo" output="screen" /> -->
	
	<!-- uncomment when ready to save information -->
	<!-- launch csv generator to record subject vehicle and tracked object data -->
	<!--<node pkg="excuse_me_pkg" type="dumpTextSample" name="trackRecorder" output="screen">
		<param name="save_path" value="/home/gbeale/autoware.ai/src/processingCode/excuse_me_pkg/OldTrackingResults/" />
		<param name="fixed_frame" value="map_veh" />
		<param name="earth_frame" value="earth" />
		<param name="objects_topic" value="/detection/object_tracker/objects_filtered" /> 
	</node>-->  <!-- for objects from tracker: /detection/object_tracker/objects_filtered, objects from L shape: /detection/shape_estimation/objects_filtered -->
	
	<!--
	<node pkg="detected_objects_visualizer" type="visualize_detected_objects" name="euclidean_track_viz" output="screen" ns="/detection/object_tracker">
		<param name="objects_src_topic" value="/objects" />
	</node> -->
</launch>
